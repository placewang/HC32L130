<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\HEX\E723.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\HEX\E723.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Fri Jul 01 20:00:10 2022
<BR><P>
<H3>Maximum Stack Usage =        612 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; $Super$$main &rArr; Cmd_Task &rArr; CmdTask1 &rArr; Flash_w &rArr; Flash_SaveErase &rArr; Flash_writeBy &rArr; Flash_WriteByte
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[3b]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[f]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">NMI_Handler</a><BR>
 <LI><a href="#[11]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">SVC_Handler</a><BR>
 <LI><a href="#[12]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">PendSV_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2c]">ADC_IRQHandler</a> from interrupts_hc32l13x.o(i.ADC_IRQHandler) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[33]">CLKTRIM_IRQHandler</a> from interrupts_hc32l13x.o(i.CLKTRIM_IRQHandler) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[18]">DMAC_IRQHandler</a> from interrupts_hc32l13x.o(i.DMAC_IRQHandler) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[32]">FLASH_RAM_IRQHandler</a> from interrupts_hc32l13x.o(i.FLASH_RAM_IRQHandler) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[10]">HardFault_Handler</a> from interrupts_hc32l13x.o(i.HardFault_Handler) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[20]">I2C0_IRQHandler</a> from interrupts_hc32l13x.o(i.I2C0_IRQHandler) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[21]">I2C1_IRQHandler</a> from interrupts_hc32l13x.o(i.I2C1_IRQHandler) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[31]">LCD_IRQHandler</a> from interrupts_hc32l13x.o(i.LCD_IRQHandler) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[25]">LPTIM_IRQHandler</a> from interrupts_hc32l13x.o(i.LPTIM_IRQHandler) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[1c]">LPUART0_IRQHandler</a> from interrupts_hc32l13x.o(i.LPUART0_IRQHandler) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[1d]">LPUART1_IRQHandler</a> from interrupts_hc32l13x.o(i.LPUART1_IRQHandler) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[30]">LVD_IRQHandler</a> from interrupts_hc32l13x.o(i.LVD_IRQHandler) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[f]">NMI_Handler</a> from startup_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[29]">PCA_IRQHandler</a> from interrupts_hc32l13x.o(i.PCA_IRQHandler) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[2d]">PCNT_IRQHandler</a> from interrupts_hc32l13x.o(i.PCNT_IRQHandler) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[14]">PORTA_IRQHandler</a> from interrupts_hc32l13x.o(i.PORTA_IRQHandler) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[15]">PORTB_IRQHandler</a> from interrupts_hc32l13x.o(i.PORTB_IRQHandler) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[16]">PORTC_IRQHandler</a> from interrupts_hc32l13x.o(i.PORTC_IRQHandler) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[17]">PORTD_IRQHandler</a> from interrupts_hc32l13x.o(i.PORTD_IRQHandler) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[12]">PendSV_Handler</a> from startup_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[2b]">RTC_IRQHandler</a> from interrupts_hc32l13x.o(i.RTC_IRQHandler) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[e]">Reset_Handler</a> from startup_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[1e]">SPI0_IRQHandler</a> from interrupts_hc32l13x.o(i.SPI0_IRQHandler) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[1f]">SPI1_IRQHandler</a> from interrupts_hc32l13x.o(i.SPI1_IRQHandler) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[11]">SVC_Handler</a> from startup_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[13]">SysTick_Handler</a> from interrupts_hc32l13x.o(i.SysTick_Handler) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[34]">SystemInit</a> from system_hc32l13x.o(i.SystemInit) referenced from startup_hc32l13x.o(.text)
 <LI><a href="#[22]">TIM0_IRQHandler</a> from interrupts_hc32l13x.o(i.TIM0_IRQHandler) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[23]">TIM1_IRQHandler</a> from interrupts_hc32l13x.o(i.TIM1_IRQHandler) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[24]">TIM2_IRQHandler</a> from interrupts_hc32l13x.o(i.TIM2_IRQHandler) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[19]">TIM3_IRQHandler</a> from interrupts_hc32l13x.o(i.TIM3_IRQHandler) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[26]">TIM4_IRQHandler</a> from interrupts_hc32l13x.o(i.TIM4_IRQHandler) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[27]">TIM5_IRQHandler</a> from interrupts_hc32l13x.o(i.TIM5_IRQHandler) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[28]">TIM6_IRQHandler</a> from interrupts_hc32l13x.o(i.TIM6_IRQHandler) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[1a]">UART0_IRQHandler</a> from interrupts_hc32l13x.o(i.UART0_IRQHandler) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[1b]">UART1_IRQHandler</a> from interrupts_hc32l13x.o(i.UART1_IRQHandler) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[2e]">VC0_IRQHandler</a> from interrupts_hc32l13x.o(i.VC0_IRQHandler) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[2f]">VC1_IRQHandler</a> from interrupts_hc32l13x.o(i.VC1_IRQHandler) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[2a]">WDT_IRQHandler</a> from interrupts_hc32l13x.o(i.WDT_IRQHandler) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[36]">__main</a> from __main.o(!!!main) referenced from startup_hc32l13x.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[36]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[3c]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[3e]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[11d]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[11e]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[3f]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[11f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[45]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[120]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[40]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[121]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[122]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[123]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[124]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[125]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[126]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[127]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[128]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[129]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[12a]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[12b]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[12c]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[12d]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[12e]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[12f]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[130]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[131]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[132]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[133]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[134]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[4a]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[135]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[136]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[137]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[138]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[139]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[13a]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[13b]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[3d]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[13c]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[42]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[44]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[13d]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[46]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; $Super$$main &rArr; Cmd_Task &rArr; CmdTask1 &rArr; Flash_w &rArr; Flash_SaveErase &rArr; Flash_writeBy &rArr; Flash_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[13e]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[62]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[49]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[13f]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[4b]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetHClkFreq
</UL>

<P><STRONG><a name="[140]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[e]"></a>Reset_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, startup_hc32l13x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[141]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[f]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32l13x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32l13x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32l13x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_hc32l13x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[142]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>malloc</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpSend_Flash_rD
</UL>

<P><STRONG><a name="[50]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpSend_Flash_rD
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[52]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[51]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[53]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPclearData
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsSend_Data_Uart
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdTask1
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_w
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan_row
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCmd_Task
</UL>

<P><STRONG><a name="[143]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpSend_XY
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveErase
</UL>

<P><STRONG><a name="[144]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[145]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueFull
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeQueue
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay10us
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnQueue
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
</UL>

<P><STRONG><a name="[146]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_Init
</UL>

<P><STRONG><a name="[56]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[55]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[c8]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_Init
</UL>

<P><STRONG><a name="[149]"></a>_ffixu</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ffixui.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[57]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>

<P><STRONG><a name="[14a]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_Init
</UL>

<P><STRONG><a name="[14b]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[14e]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>__Heap_Full</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[5b]"></a>__Heap_Broken</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[41]"></a>_init_alloc</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[5d]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[6]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[151]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[5c]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[43]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[48]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[5f]"></a>__sig_exit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[5e]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[63]"></a>__default_signal_display</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[47]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, system_hc32l13x.o(i.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = main &rArr; $Super$$main &rArr; Cmd_Task &rArr; CmdTask1 &rArr; Flash_w &rArr; Flash_SaveErase &rArr; Flash_writeBy &rArr; Flash_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[2c]"></a>ADC_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(i.ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>Backlight_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bsp_gpio.o(i.Backlight_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Backlight_init &rArr; Sysctrl_SetPeripheralGate &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[105]"></a>Bt_ClearIntFlag</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, bt.o(i.Bt_ClearIntFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Bt_ClearIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_init
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim0_IRQHandler
</UL>

<P><STRONG><a name="[101]"></a>Bt_GetIntFlag</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bt.o(i.Bt_GetIntFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bt_GetIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim0_IRQHandler
</UL>

<P><STRONG><a name="[107]"></a>Bt_M0_ARRSet</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, bt.o(i.Bt_M0_ARRSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Bt_M0_ARRSet
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_init
</UL>

<P><STRONG><a name="[108]"></a>Bt_M0_Cnt16Set</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, bt.o(i.Bt_M0_Cnt16Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Bt_M0_Cnt16Set
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_init
</UL>

<P><STRONG><a name="[10a]"></a>Bt_M0_Run</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bt.o(i.Bt_M0_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bt_M0_Run
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_init
</UL>

<P><STRONG><a name="[109]"></a>Bt_Mode0_EnableIrq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bt.o(i.Bt_Mode0_EnableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bt_Mode0_EnableIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_init
</UL>

<P><STRONG><a name="[106]"></a>Bt_Mode0_Init</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, bt.o(i.Bt_Mode0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bt_Mode0_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_init
</UL>

<P><STRONG><a name="[6e]"></a>Buzz_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bsp_gpio.o(i.Buzz_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Buzz_init &rArr; Sysctrl_SetPeripheralGate &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[33]"></a>CLKTRIM_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(i.CLKTRIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLKTRIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkTrim_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>CRC16</STRONG> (Thumb, 60 bytes, Stack size 36 bytes, app_cmd.o(i.CRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_w
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpFlashW
</UL>

<P><STRONG><a name="[97]"></a>Clearpackbit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app.lpuart.o(i.Clearpackbit))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Data_HTL
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSRev_data
</UL>

<P><STRONG><a name="[104]"></a>ClerlCMD_TimeCount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, bsp_time.o(i.ClerlCMD_TimeCount))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim0_IRQHandler
</UL>

<P><STRONG><a name="[103]"></a>ClerlTouch_TimeCount</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bsp_time.o(i.ClerlTouch_TimeCount))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim0_IRQHandler
</UL>

<P><STRONG><a name="[102]"></a>Clerlkey_TimeCount</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bsp_time.o(i.Clerlkey_TimeCount))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim0_IRQHandler
</UL>

<P><STRONG><a name="[77]"></a>CmdTask1</STRONG> (Thumb, 398 bytes, Stack size 8 bytes, app_cmd.o(i.CmdTask1))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = CmdTask1 &rArr; Flash_w &rArr; Flash_SaveErase &rArr; Flash_writeBy &rArr; Flash_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeQueue
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_char
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBuffCmd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_w
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_r
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_Flash
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_Task
</UL>

<P><STRONG><a name="[7e]"></a>Cmd_Task</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_cmd.o(i.Cmd_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = Cmd_Task &rArr; CmdTask1 &rArr; Flash_w &rArr; Flash_SaveErase &rArr; Flash_writeBy &rArr; Flash_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdTask1
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[7a]"></a>Cmd_char</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, app_cmd.o(i.Cmd_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Cmd_char &rArr; Rev_Touch_XY &rArr; TSC2046_ReadAdc_XY &rArr; TSC2046_ReadAdc &rArr; TSC2046_WriteCMD &rArr; Gpio_SetIO &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rev_Touch_XY
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdTask1
</UL>

<P><STRONG><a name="[18]"></a>DMAC_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(i.DMAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMAC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dmac_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[de]"></a>Data_escape</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, app.lpuart.o(i.Data_escape))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendpackHead
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sendby
</UL>

<P><STRONG><a name="[78]"></a>DeQueue</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, queue.o(i.DeQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DeQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueEmpty
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSRev_data
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdTask1
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpRsacketProcessing
</UL>

<P><STRONG><a name="[84]"></a>EnQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(i.EnQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EnQueue &rArr; QueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueFull
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_IRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpUart0_IRQHandler
</UL>

<P><STRONG><a name="[86]"></a>EnableNvic</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, interrupts_hc32l13x.o(i.EnableNvic))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpuart_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_init
</UL>

<P><STRONG><a name="[32]"></a>FLASH_RAM_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(i.FLASH_RAM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_RAM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ram_IRQHandler (Weak Reference)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>Flash_Init</STRONG> (Thumb, 188 bytes, Stack size 64 bytes, flash.o(i.Flash_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Flash_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[91]"></a>Flash_LockAll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, flash.o(i.Flash_LockAll))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteByte
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SectorErase
</UL>

<P><STRONG><a name="[8c]"></a>Flash_SaveErase</STRONG> (Thumb, 142 bytes, Stack size 544 bytes, app_cmd.o(i.Flash_SaveErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = Flash_SaveErase &rArr; Flash_writeBy &rArr; Flash_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_writeBy
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_readBy
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SectorErase
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_w
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpFlashW
</UL>

<P><STRONG><a name="[8e]"></a>Flash_SectorErase</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, flash.o(i.Flash_SectorErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Flash_SectorErase
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_UnlockAll
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_LockAll
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsSend_Data_Uart
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveErase
</UL>

<P><STRONG><a name="[90]"></a>Flash_UnlockAll</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, flash.o(i.Flash_UnlockAll))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteByte
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SectorErase
</UL>

<P><STRONG><a name="[f3]"></a>Flash_WaitCycle</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, flash.o(i.Flash_WaitCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Flash_WaitCycle
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systimeclk
</UL>

<P><STRONG><a name="[92]"></a>Flash_WriteByte</STRONG> (Thumb, 158 bytes, Stack size 12 bytes, flash.o(i.Flash_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Flash_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_UnlockAll
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_LockAll
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_writeBy
</UL>

<P><STRONG><a name="[8d]"></a>Flash_readBy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_flash.o(i.Flash_readBy))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpSend_Flash_rD
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Flash_rD
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveErase
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_r
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpFlash_r
</UL>

<P><STRONG><a name="[8f]"></a>Flash_writeBy</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bsp_flash.o(i.Flash_writeBy))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Flash_writeBy &rArr; Flash_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsSend_Data_Uart
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveErase
</UL>

<P><STRONG><a name="[70]"></a>GPIO_Key_init</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, bsp_gpio.o(i.GPIO_Key_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_Key_init &rArr; Sysctrl_SetPeripheralGate &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[94]"></a>GPRSRev_data</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, app.lpuart.o(i.GPRSRev_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GPRSRev_data &rArr; SendpackHead &rArr; Uart_SendDataPoll &rArr; Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeQueue
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_GetStatus
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendpackHead
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sendby
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getpackheadlen
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Data_HTL
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clearpackbit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendDataPoll
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[9c]"></a>GPSendKeyInfo</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, app_key.o(i.GPSendKeyInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPSendKeyInfo &rArr; Uart_SendDataPoll &rArr; Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendDataPoll
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsSend_Data_Uart
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScanTask
</UL>

<P><STRONG><a name="[9d]"></a>GPclearData</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_gprscmd.o(i.GPclearData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPclearData
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsSend_Data_Uart
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pack_Classification
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCmd_Task
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpRsacketProcessing
</UL>

<P><STRONG><a name="[a8]"></a>GPdataTranslate</STRONG> (Thumb, 154 bytes, Stack size 12 bytes, app_gprscmd.o(i.GPdataTranslate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPdataTranslate
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpRsacketProcessing
</UL>

<P><STRONG><a name="[b1]"></a>GetBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ddl.o(i.GetBit))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetIrqStatus
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetStatus
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_GetStatus
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetInputIO
</UL>

<P><STRONG><a name="[a6]"></a>GetGpsPack</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, app_gprscmd.o(i.GetGpsPack))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpRsacketProcessing
</UL>

<P><STRONG><a name="[9e]"></a>GetLcdType</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, bsp_gpio.o(i.GetLcdType))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetLcdType &rArr; Gpio_GetInputIO
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetInputIO
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendInformation
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpSendInformation
</UL>

<P><STRONG><a name="[95]"></a>Get_Data_HTL</STRONG> (Thumb, 146 bytes, Stack size 4 bytes, app.lpuart.o(i.Get_Data_HTL))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Get_Data_HTL
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clearpackbit
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSRev_data
</UL>

<P><STRONG><a name="[96]"></a>Getpackheadlen</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, app.lpuart.o(i.Getpackheadlen))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSRev_data
</UL>

<P><STRONG><a name="[a1]"></a>GpCmd_char</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, app_gprscmd.o(i.GpCmd_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GpCmd_char &rArr; Lpuart_init &rArr; LPUart_Init &rArr; LPUart_EnableFunc &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rev_Touch_XY
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpuart_init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCmd_Task
</UL>

<P><STRONG><a name="[a3]"></a>GpFlashW</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, app_gprscmd.o(i.GpFlashW))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = GpFlashW &rArr; Flash_SaveErase &rArr; Flash_writeBy &rArr; Flash_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveErase
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCmd_Task
</UL>

<P><STRONG><a name="[a4]"></a>GpFlash_r</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, app_gprscmd.o(i.GpFlash_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GpFlash_r
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_readBy
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCmd_Task
</UL>

<P><STRONG><a name="[a5]"></a>GpRsacketProcessing</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, app_gprscmd.o(i.GpRsacketProcessing))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GpRsacketProcessing &rArr; DeQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeQueue
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPclearData
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pack_Classification
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpsPack
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPdataTranslate
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCmd_Task
</UL>

<P><STRONG><a name="[a9]"></a>GpSendInformation</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, app_version.o(i.GpSendInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GpSendInformation &rArr; Uart_SendDataPoll &rArr; Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLcdType
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendDataPoll
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsSend_Data_Uart
</UL>

<P><STRONG><a name="[ad]"></a>GpSend_Uart0</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, app_gpsuart0.o(i.GpSend_Uart0))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GpSend_Uart0 &rArr; Uart_SendDataPoll &rArr; Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendDataPoll
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsSend_Data_Uart
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpSend_XY
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpSend_Flash_rD
</UL>

<P><STRONG><a name="[ae]"></a>GpSend_XY</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, app_gpsuart0.o(i.GpSend_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GpSend_XY &rArr; GpSend_Uart0 &rArr; Uart_SendDataPoll &rArr; Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData_escape
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpSend_Uart0
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsSend_Data_Uart
</UL>

<P><STRONG><a name="[af]"></a>Gpio_ClearIrq</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gpio.o(i.Gpio_ClearIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Gpio_ClearIrq &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortA_IRQHandler
</UL>

<P><STRONG><a name="[6a]"></a>Gpio_ClrIO</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gpio.o(i.Gpio_ClrIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Gpio_ClrIO &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC2046_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC2046_WriteCMD
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC2046_ReadCMD
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC2046_ReadAdc
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systme_led
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzz_init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backlight_init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_char
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectRow
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpCmd_char
</UL>

<P><STRONG><a name="[9f]"></a>Gpio_GetInputIO</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, gpio.o(i.Gpio_GetInputIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Gpio_GetInputIO
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rev_Touch_XY
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC2046_ReadCMD
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systme_led
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLcdType
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim0_IRQHandler
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSelectCol
</UL>

<P><STRONG><a name="[b2]"></a>Gpio_GetIrqStatus</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, gpio.o(i.Gpio_GetIrqStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Gpio_GetIrqStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortA_IRQHandler
</UL>

<P><STRONG><a name="[69]"></a>Gpio_Init</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, gpio.o(i.Gpio_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC2046_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpuart_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Key_init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzz_init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backlight_init
</UL>

<P><STRONG><a name="[cd]"></a>Gpio_SetAfMode</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gpio.o(i.Gpio_SetAfMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Gpio_SetAfMode
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpuart_init
</UL>

<P><STRONG><a name="[7f]"></a>Gpio_SetIO</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gpio.o(i.Gpio_SetIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Gpio_SetIO &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC2046_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rev_Touch_XY
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC2046_WriteCMD
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC2046_ReadCMD
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC2046_ReadAdc
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systme_led
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_char
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectRow
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpCmd_char
</UL>

<P><STRONG><a name="[b3]"></a>GprsCmd_Task</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, app_gprscmd.o(i.GprsCmd_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = GprsCmd_Task &rArr; GpFlashW &rArr; Flash_SaveErase &rArr; Flash_writeBy &rArr; Flash_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPclearData
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpRsacketProcessing
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpFlash_r
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpFlashW
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpCmd_char
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToggleConfirmationHandshake
</UL>

<P><STRONG><a name="[b4]"></a>GpsSend_Data_Uart</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, app_gpsuart0.o(i.GpsSend_Data_Uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GpsSend_Data_Uart &rArr; GpSend_XY &rArr; GpSend_Uart0 &rArr; Uart_SendDataPoll &rArr; Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_writeBy
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SectorErase
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPclearData
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_LPUart0
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpSend_XY
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpSend_Uart0
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpSend_Flash_rD
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpSendInformation
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSendKeyInfo
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToggleConfirmationHandshake
</UL>

<P><STRONG><a name="[10]"></a>HardFault_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>I2C0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(i.I2C0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c0_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>I2C1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(i.I2C1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c1_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[cf]"></a>InitQueue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, queue.o(i.InitQueue))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpuart_init
</UL>

<P><STRONG><a name="[71]"></a>KeyInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, app_key.o(i.KeyInit))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[b8]"></a>KeyScanTask</STRONG> (Thumb, 514 bytes, Stack size 8 bytes, app_key.o(i.KeyScanTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = KeyScanTask &rArr; key_scan_row &rArr; SelectRow &rArr; Gpio_SetIO &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendKeyInfo
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSendKeyInfo
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan_row
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_is_down
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_is_change
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyScanCode
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[31]"></a>LCD_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(i.LCD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>LPTIM_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(i.LPTIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPTIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpTim_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>LPUART0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(i.LPUART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LPUART0_IRQHandler &rArr; LpUart0_IRQHandler &rArr; LPUart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpUart0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(i.LPUART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpUart1_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>LPUart_ClrStatus</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lpuart.o(i.LPUart_ClrStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPUart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpuart_init
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpUart0_IRQHandler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_SendData
</UL>

<P><STRONG><a name="[c2]"></a>LPUart_DisableIrq</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpuart.o(i.LPUart_DisableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPUart_DisableIrq &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpuart_init
</UL>

<P><STRONG><a name="[c3]"></a>LPUart_EnableFunc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpuart.o(i.LPUart_EnableFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPUart_EnableFunc &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_Init
</UL>

<P><STRONG><a name="[c4]"></a>LPUart_EnableIrq</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpuart.o(i.LPUart_EnableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPUart_EnableIrq &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpuart_init
</UL>

<P><STRONG><a name="[9b]"></a>LPUart_GetStatus</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lpuart.o(i.LPUart_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPUart_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpUart0_IRQHandler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSRev_data
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_SendData
</UL>

<P><STRONG><a name="[c5]"></a>LPUart_Init</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, lpuart.o(i.LPUart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LPUart_Init &rArr; LPUart_EnableFunc &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_EnableFunc
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpuart_init
</UL>

<P><STRONG><a name="[cb]"></a>LPUart_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpuart.o(i.LPUart_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpUart0_IRQHandler
</UL>

<P><STRONG><a name="[c9]"></a>LPUart_SendData</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lpuart.o(i.LPUart_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LPUart_SendData &rArr; LPUart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_GetStatus
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_ClrStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_LPUart0
</UL>

<P><STRONG><a name="[30]"></a>LVD_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(i.LVD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LVD_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lvd_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>Led_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, bsp_gpio.o(i.Led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Led_init &rArr; Sysctrl_SetPeripheralGate &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[37]"></a>LpUart0_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, bsp_uart.o(i.LpUart0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LpUart0_IRQHandler &rArr; LPUart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_ReceiveData
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_GetStatus
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_ClrStatus
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_IRQHandler
</UL>

<P><STRONG><a name="[a2]"></a>Lpuart_init</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, bsp_uart.o(i.Lpuart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Lpuart_init &rArr; LPUart_Init &rArr; LPUart_EnableFunc &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_EnableIrq
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_DisableIrq
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_ClrStatus
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitQueue
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetAfMode
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetPClkFreq
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpCmd_char
</UL>

<P><STRONG><a name="[29]"></a>PCA_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(i.PCA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PCA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pca_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>PCNT_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(i.PCNT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PCNT_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcnt_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>PORTA_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(i.PORTA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PORTA_IRQHandler &rArr; PortA_IRQHandler &rArr; Gpio_ClearIrq &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PORTB_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(i.PORTB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORTB_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortB_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PORTC_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(i.PORTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORTC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortC_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PORTD_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(i.PORTD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORTD_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortD_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>Pack_Classification</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, app_gprscmd.o(i.Pack_Classification))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Pack_Classification &rArr; GPclearData
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPclearData
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpRsacketProcessing
</UL>

<P><STRONG><a name="[38]"></a>PortA_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp_touch.o(i.PortA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PortA_IRQHandler &rArr; Gpio_ClearIrq &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetIrqStatus
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClearIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTA_IRQHandler
</UL>

<P><STRONG><a name="[82]"></a>QueueEmpty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, queue.o(i.QueueEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeQueue
</UL>

<P><STRONG><a name="[85]"></a>QueueFull</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(i.QueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnQueue
</UL>

<P><STRONG><a name="[2b]"></a>RTC_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>Rev_Touch_XY</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, bsp_touch.o(i.Rev_Touch_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Rev_Touch_XY &rArr; TSC2046_ReadAdc_XY &rArr; TSC2046_ReadAdc &rArr; TSC2046_WriteCMD &rArr; Gpio_SetIO &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC2046_ReadAdc_XY
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetInputIO
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_char
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpCmd_char
</UL>

<P><STRONG><a name="[1e]"></a>SPI0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(i.SPI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi0_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(i.SPI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi1_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[118]"></a>ScanInteractiveState</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, app_gpsuart0.o(i.ScanInteractiveState))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ScanInteractiveState
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[6f]"></a>Screen_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, bsp_gpio.o(i.Screen_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Screen_init &rArr; Sysctrl_SetPeripheralGate &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[ac]"></a>SendData_escape</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, app_gpsuart0.o(i.SendData_escape))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SendData_escape
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpSend_XY
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpSend_Flash_rD
</UL>

<P><STRONG><a name="[da]"></a>SendInformation</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, app_version.o(i.SendInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SendInformation &rArr; Uart_SendDataPoll &rArr; Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLcdType
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendDataPoll
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data_Uart
</UL>

<P><STRONG><a name="[bd]"></a>SendKeyInfo</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, app_key.o(i.SendKeyInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SendKeyInfo &rArr; Uart_SendDataPoll &rArr; Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendDataPoll
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data_Uart
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScanTask
</UL>

<P><STRONG><a name="[db]"></a>Send_Data_Uart</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, app_uart0.o(i.Send_Data_Uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Send_Data_Uart &rArr; Send_XY &rArr; Send_Uart0 &rArr; Uart_SendDataPoll &rArr; Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_XY
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Uart0
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Flash_rD
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendInformation
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendKeyInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[b5]"></a>Send_LPUart0</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, app_gpsuart0.o(i.Send_LPUart0))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Send_LPUart0 &rArr; LPUart_SendData &rArr; LPUart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsSend_Data_Uart
</UL>

<P><STRONG><a name="[ab]"></a>Send_Uart0</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, app_uart0.o(i.Send_Uart0))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Send_Uart0 &rArr; Uart_SendDataPoll &rArr; Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendDataPoll
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpSend_Flash_rD
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_XY
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data_Uart
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Flash_rD
</UL>

<P><STRONG><a name="[dc]"></a>Send_XY</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, app_uart0.o(i.Send_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Send_XY &rArr; Send_Uart0 &rArr; Uart_SendDataPoll &rArr; Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Uart0
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data_Uart
</UL>

<P><STRONG><a name="[99]"></a>Sendby</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, app.lpuart.o(i.Sendby))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Sendby &rArr; Uart_SendDataPoll &rArr; Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_escape
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendDataPoll
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSRev_data
</UL>

<P><STRONG><a name="[98]"></a>SendpackHead</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, app.lpuart.o(i.SendpackHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SendpackHead &rArr; Uart_SendDataPoll &rArr; Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_escape
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendDataPoll
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSRev_data
</UL>

<P><STRONG><a name="[b0]"></a>SetBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ddl.o(i.SetBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClearIrq
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIrq
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ClrStatus
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_EnableIrq
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_DisableIrq
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_ClrStatus
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_EnableFunc
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableFunc
</UL>

<P><STRONG><a name="[13]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[e0]"></a>Sysctrl_ClkInit</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, sysctrl.o(i.Sysctrl_ClkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Sysctrl_ClkInit &rArr; Sysctrl_SysClkSwitch &rArr; SystemCoreClockUpdate &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_XTHDriverCfg
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SysClkSwitch
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetXTHStableTime
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPLLStableTime
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkSourceEnable
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_XTLDriverCfg
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetXTLStableTime
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetRCLStableTime
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPCLKDiv
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetHCLKDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systimeclk
</UL>

<P><STRONG><a name="[e8]"></a>Sysctrl_ClkSourceEnable</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, sysctrl.o(i.Sysctrl_ClkSourceEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Sysctrl_ClkSourceEnable &rArr; delay10us
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay10us
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysctrlUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systimeclk
</UL>

<P><STRONG><a name="[ee]"></a>Sysctrl_GetHClkFreq</STRONG> (Thumb, 354 bytes, Stack size 48 bytes, sysctrl.o(i.Sysctrl_GetHClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetPClkFreq
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systimeclk
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[ce]"></a>Sysctrl_GetPClkFreq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sysctrl.o(i.Sysctrl_GetPClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Sysctrl_GetPClkFreq &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetHClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpuart_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systimeclk
</UL>

<P><STRONG><a name="[ea]"></a>Sysctrl_SetHCLKDiv</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sysctrl.o(i.Sysctrl_SetHCLKDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sysctrl_SetHCLKDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysctrlUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[eb]"></a>Sysctrl_SetPCLKDiv</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sysctrl.o(i.Sysctrl_SetPCLKDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sysctrl_SetPCLKDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysctrlUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[f5]"></a>Sysctrl_SetPLLFreq</STRONG> (Thumb, 258 bytes, Stack size 20 bytes, sysctrl.o(i.Sysctrl_SetPLLFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Sysctrl_SetPLLFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systimeclk
</UL>

<P><STRONG><a name="[e7]"></a>Sysctrl_SetPLLStableTime</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sysctrl.o(i.Sysctrl_SetPLLStableTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sysctrl_SetPLLStableTime
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systimeclk
</UL>

<P><STRONG><a name="[68]"></a>Sysctrl_SetPeripheralGate</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sysctrl.o(i.Sysctrl_SetPeripheralGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Sysctrl_SetPeripheralGate &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC2046_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpuart_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systimeclk
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Key_init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzz_init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backlight_init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[e4]"></a>Sysctrl_SetRCLStableTime</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sysctrl.o(i.Sysctrl_SetRCLStableTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sysctrl_SetRCLStableTime
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[f4]"></a>Sysctrl_SetXTHFreq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sysctrl.o(i.Sysctrl_SetXTHFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sysctrl_SetXTHFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systimeclk
</UL>

<P><STRONG><a name="[e3]"></a>Sysctrl_SetXTHStableTime</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sysctrl.o(i.Sysctrl_SetXTHStableTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sysctrl_SetXTHStableTime
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systimeclk
</UL>

<P><STRONG><a name="[e6]"></a>Sysctrl_SetXTLStableTime</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sysctrl.o(i.Sysctrl_SetXTLStableTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sysctrl_SetXTLStableTime
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[e9]"></a>Sysctrl_SysClkSwitch</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sysctrl.o(i.Sysctrl_SysClkSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Sysctrl_SysClkSwitch &rArr; SystemCoreClockUpdate &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysctrlUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systimeclk
</UL>

<P><STRONG><a name="[e2]"></a>Sysctrl_XTHDriverCfg</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sysctrl.o(i.Sysctrl_XTHDriverCfg))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systimeclk
</UL>

<P><STRONG><a name="[e5]"></a>Sysctrl_XTLDriverCfg</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, sysctrl.o(i.Sysctrl_XTLDriverCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Sysctrl_XTLDriverCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[f0]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system_hc32l13x.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SystemCoreClockUpdate &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetHClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SysClkSwitch
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[34]"></a>SystemInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, system_hc32l13x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HidePinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(.text)
</UL>
<P><STRONG><a name="[f2]"></a>Systimeclk</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, bsp_clk.o(i.Systimeclk))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Systimeclk &rArr; Sysctrl_ClkInit &rArr; Sysctrl_SysClkSwitch &rArr; SystemCoreClockUpdate &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_XTHDriverCfg
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SysClkSwitch
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetXTHStableTime
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetXTHFreq
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPLLStableTime
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPLLFreq
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetPClkFreq
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkSourceEnable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WaitCycle
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetHClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[f7]"></a>Systme_led</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bsp_time.o(i.Systme_led))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Systme_led &rArr; Gpio_SetIO &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetInputIO
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[22]"></a>TIM0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(i.TIM0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM0_IRQHandler &rArr; Tim0_IRQHandler &rArr; Bt_GetIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(i.TIM1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim1_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIM3_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM4_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim4_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM5_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(i.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim5_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM6_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(i.TIM6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM6_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim6_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>TSC2046_Init</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, bsp_touch.o(i.TSC2046_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TSC2046_Init &rArr; Sysctrl_SetPeripheralGate &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[d6]"></a>TSC2046_ReadAdc_XY</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, bsp_touch.o(i.TSC2046_ReadAdc_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TSC2046_ReadAdc_XY &rArr; TSC2046_ReadAdc &rArr; TSC2046_WriteCMD &rArr; Gpio_SetIO &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC2046_ReadAdc
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rev_Touch_XY
</UL>

<P><STRONG><a name="[39]"></a>Tim0_IRQHandler</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, bsp_time.o(i.Tim0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Tim0_IRQHandler &rArr; Bt_GetIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_GetIntFlag
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_ClearIntFlag
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clerlkey_TimeCount
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClerlTouch_TimeCount
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClerlCMD_TimeCount
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetInputIO
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_IRQHandler
</UL>

<P><STRONG><a name="[72]"></a>Time_init</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, bsp_time.o(i.Time_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Time_init &rArr; Sysctrl_SetPeripheralGate &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_Mode0_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_Mode0_EnableIrq
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_M0_Run
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_M0_Cnt16Set
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_M0_ARRSet
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_ClearIntFlag
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[10b]"></a>ToggleConfirmationHandshake</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, app_gprscmd.o(i.ToggleConfirmationHandshake))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = ToggleConfirmationHandshake &rArr; GprsCmd_Task &rArr; GpFlashW &rArr; Flash_SaveErase &rArr; Flash_writeBy &rArr; Flash_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsSend_Data_Uart
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCmd_Task
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1a]"></a>UART0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART0_IRQHandler &rArr; Uart0_IRQHandler &rArr; Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>UART1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(i.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>Uart0_IRQHandler</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, bsp_uart.o(i.Uart0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Uart0_IRQHandler &rArr; Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ReceiveData
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetStatus
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ClrStatus
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[6c]"></a>Uart0_init</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, bsp_uart.o(i.Uart0_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Uart0_init &rArr; Uart_Init &rArr; Uart_EnableFunc &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIrq
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ClrStatus
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitQueue
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetAfMode
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetPClkFreq
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdTask1
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToggleConfirmationHandshake
</UL>

<P><STRONG><a name="[10e]"></a>Uart_ClrStatus</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, uart.o(i.Uart_ClrStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_init
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_IRQHandler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendDataPoll
</UL>

<P><STRONG><a name="[112]"></a>Uart_EnableFunc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uart.o(i.Uart_EnableFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Uart_EnableFunc &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[111]"></a>Uart_EnableIrq</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uart.o(i.Uart_EnableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Uart_EnableIrq &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_init
</UL>

<P><STRONG><a name="[10d]"></a>Uart_GetStatus</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, uart.o(i.Uart_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uart_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_IRQHandler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendDataPoll
</UL>

<P><STRONG><a name="[110]"></a>Uart_Init</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, uart.o(i.Uart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Uart_Init &rArr; Uart_EnableFunc &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableFunc
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_init
</UL>

<P><STRONG><a name="[10f]"></a>Uart_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(i.Uart_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_IRQHandler
</UL>

<P><STRONG><a name="[9a]"></a>Uart_SendDataPoll</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, uart.o(i.Uart_SendDataPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Uart_SendDataPoll &rArr; Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetStatus
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ClrStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpSend_Uart0
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpSend_Flash_rD
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendpackHead
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sendby
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSRev_data
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Uart0
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendInformation
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpSendInformation
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendKeyInfo
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSendKeyInfo
</UL>

<P><STRONG><a name="[2e]"></a>VC0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(i.VC0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VC0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vc0_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>VC1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(i.VC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VC1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vc1_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>WDT_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(i.WDT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WDT_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdt_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[117]"></a>Wdt_Feed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wdt.o(i.Wdt_Feed))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[74]"></a>Wdt_Init</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, wdt.o(i.Wdt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Wdt_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdt_WriteWdtLoad
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[75]"></a>Wdt_Start</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wdt.o(i.Wdt_Start))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[116]"></a>Wdt_WriteWdtLoad</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wdt.o(i.Wdt_WriteWdtLoad))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdt_Init
</UL>

<P><STRONG><a name="[e1]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sysctrl.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkSourceEnable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetHClkFreq
</UL>

<P><STRONG><a name="[4c]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ddl.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[64]"></a>_ttywrch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ddl.o(i._ttywrch))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[cc]"></a>ddl_memclr</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ddl.o(i.ddl_memclr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ddl_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpuart_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_init
</UL>

<P><STRONG><a name="[ed]"></a>delay10us</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ddl.o(i.delay10us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay10us
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC2046_WriteCMD
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC2046_ReadCMD
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC2046_ReadAdc
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkSourceEnable
</UL>

<P><STRONG><a name="[f6]"></a>delay1ms</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ddl.o(i.delay1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systimeclk
</UL>

<P><STRONG><a name="[65]"></a>$Super$$main</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = $Super$$main &rArr; Cmd_Task &rArr; CmdTask1 &rArr; Flash_w &rArr; Flash_SaveErase &rArr; Flash_writeBy &rArr; Flash_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rev_Touch_XY
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systme_led
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systimeclk
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLcdType
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanInteractiveState
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsSend_Data_Uart
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSRev_data
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data_Uart
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_Task
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendInformation
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScanTask
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdt_Feed
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToggleConfirmationHandshake
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCmd_Task
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c7]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_Init
</UL>

<P><STRONG><a name="[119]"></a>_fadd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[152]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)

<P><STRONG><a name="[11b]"></a>_fsub</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[f1]"></a>_HidePinInit</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, system_hc32l13x.o(i._HidePinInit))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[87]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
</UL>

<P><STRONG><a name="[fe]"></a>TSC2046_ReadAdc</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_touch.o(i.TSC2046_ReadAdc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TSC2046_ReadAdc &rArr; TSC2046_WriteCMD &rArr; Gpio_SetIO &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay10us
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC2046_WriteCMD
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC2046_ReadCMD
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC2046_ReadAdc_XY
</UL>

<P><STRONG><a name="[100]"></a>TSC2046_ReadCMD</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, bsp_touch.o(i.TSC2046_ReadCMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TSC2046_ReadCMD &rArr; Gpio_SetIO &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay10us
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetInputIO
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC2046_ReadAdc
</UL>

<P><STRONG><a name="[ff]"></a>TSC2046_WriteCMD</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, bsp_touch.o(i.TSC2046_WriteCMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TSC2046_WriteCMD &rArr; Gpio_SetIO &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay10us
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC2046_ReadAdc
</UL>

<P><STRONG><a name="[ec]"></a>_SysctrlUnlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sysctrl.o(i._SysctrlUnlock))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SysClkSwitch
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkSourceEnable
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPCLKDiv
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetHCLKDiv
</UL>

<P><STRONG><a name="[bc]"></a>GetKeyScanCode</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, app_key.o(i.GetKeyScanCode))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScanTask
</UL>

<P><STRONG><a name="[a0]"></a>GetSelectCol</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, app_key.o(i.GetSelectCol))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetSelectCol &rArr; Gpio_GetInputIO
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetInputIO
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan_row
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_is_down
</UL>

<P><STRONG><a name="[d9]"></a>SelectRow</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, app_key.o(i.SelectRow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SelectRow &rArr; Gpio_SetIO &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan_row
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_is_down
</UL>

<P><STRONG><a name="[bb]"></a>key_is_change</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, app_key.o(i.key_is_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = key_is_change
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScanTask
</UL>

<P><STRONG><a name="[b9]"></a>key_is_down</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_key.o(i.key_is_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = key_is_down &rArr; SelectRow &rArr; Gpio_SetIO &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectRow
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSelectCol
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScanTask
</UL>

<P><STRONG><a name="[ba]"></a>key_scan_row</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, app_key.o(i.key_scan_row))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = key_scan_row &rArr; SelectRow &rArr; Gpio_SetIO &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectRow
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSelectCol
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScanTask
</UL>

<P><STRONG><a name="[7b]"></a>Cmd_Flash</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, app_cmd.o(i.Cmd_Flash))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdTask1
</UL>

<P><STRONG><a name="[7d]"></a>Flash_r</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, app_cmd.o(i.Flash_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Flash_r
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_readBy
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdTask1
</UL>

<P><STRONG><a name="[7c]"></a>Flash_w</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, app_cmd.o(i.Flash_w))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = Flash_w &rArr; Flash_SaveErase &rArr; Flash_writeBy &rArr; Flash_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveErase
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdTask1
</UL>

<P><STRONG><a name="[79]"></a>GetBuffCmd</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, app_cmd.o(i.GetBuffCmd))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdTask1
</UL>

<P><STRONG><a name="[dd]"></a>Send_Flash_rD</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, app_uart0.o(i.Send_Flash_rD))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Send_Flash_rD &rArr; Send_Uart0 &rArr; Uart_SendDataPoll &rArr; Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_readBy
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Uart0
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data_Uart
</UL>

<P><STRONG><a name="[aa]"></a>GpSend_Flash_rD</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, app_gpsuart0.o(i.GpSend_Flash_rD))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GpSend_Flash_rD &rArr; GpSend_Uart0 &rArr; Uart_SendDataPoll &rArr; Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_readBy
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData_escape
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpSend_Uart0
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Uart0
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendDataPoll
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsSend_Data_Uart
</UL>

<P><STRONG><a name="[6b]"></a>Bsp_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, main.o(i.Bsp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Bsp_Init &rArr; Uart0_init &rArr; Uart_Init &rArr; Uart_EnableFunc &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC2046_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Key_init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzz_init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backlight_init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdt_Start
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdt_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[11c]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[11a]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[66]"></a>Adc_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[76]"></a>ClkTrim_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKTRIM_IRQHandler
</UL>

<P><STRONG><a name="[81]"></a>Dmac_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAC_IRQHandler
</UL>

<P><STRONG><a name="[88]"></a>Flash_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_RAM_IRQHandler
</UL>

<P><STRONG><a name="[b6]"></a>I2c0_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>

<P><STRONG><a name="[b7]"></a>I2c1_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[be]"></a>Lcd_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IRQHandler
</UL>

<P><STRONG><a name="[bf]"></a>LpTim_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_IRQHandler
</UL>

<P><STRONG><a name="[c0]"></a>LpUart1_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[ca]"></a>Lvd_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVD_IRQHandler
</UL>

<P><STRONG><a name="[d0]"></a>Pca_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA_IRQHandler
</UL>

<P><STRONG><a name="[d1]"></a>Pcnt_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCNT_IRQHandler
</UL>

<P><STRONG><a name="[d2]"></a>PortB_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTB_IRQHandler
</UL>

<P><STRONG><a name="[d3]"></a>PortC_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTC_IRQHandler
</UL>

<P><STRONG><a name="[d4]"></a>PortD_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTD_IRQHandler
</UL>

<P><STRONG><a name="[89]"></a>Ram_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_RAM_IRQHandler
</UL>

<P><STRONG><a name="[d5]"></a>Rtc_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[d7]"></a>Spi0_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_IRQHandler
</UL>

<P><STRONG><a name="[d8]"></a>Spi1_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
</UL>

<P><STRONG><a name="[df]"></a>SysTick_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[f8]"></a>Tim1_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_IRQHandler
</UL>

<P><STRONG><a name="[f9]"></a>Tim2_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[fa]"></a>Tim3_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[fb]"></a>Tim4_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[fc]"></a>Tim5_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[fd]"></a>Tim6_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
</UL>

<P><STRONG><a name="[10c]"></a>Uart1_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[113]"></a>Vc0_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VC0_IRQHandler
</UL>

<P><STRONG><a name="[114]"></a>Vc1_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VC1_IRQHandler
</UL>

<P><STRONG><a name="[115]"></a>Wdt_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IRQHandler
</UL>

<P><STRONG><a name="[61]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
